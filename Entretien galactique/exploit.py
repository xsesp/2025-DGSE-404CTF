import socket
import re
from sympy import symbols, Poly, solve

def solve_cubic_exact(a, b, c, d):
    x = symbols('x')
    poly = Poly(a * x**3 + b * x**2 + c * x + d)
    roots = solve(poly, x)
    return sorted([int(root) for root in roots])

def extract_equations(data):
    try:
        S = int(re.search(r"x \+ y \+ z = (\d+)", data).group(1))
        Q = int(re.search(r"x\^2 \+ y\^2 \+ z\^2 = (\d+)", data).group(1))
        C = int(re.search(r"x\^3 \+ y\^3 \+ z\^3 = (\d+)", data).group(1))
        return S, Q, C
    except Exception:
        return None

def main():
    host = 'challenges.404ctf.fr'
    port = 30069
    conn = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    conn.connect((host, port))

    # Étape initiale : accueil + prénom
    data = conn.recv(4096).decode()
    print(data)
    conn.sendall(b"xsesp\n")

    while True:
        data = conn.recv(4096).decode()
        print(data)

        equations = extract_equations(data)
        if not equations:
            print("END.")
            break

        S, Q, C = equations

        # Viète
        xy_yz_zx = (S**2 - Q) // 2
        xyz = (C - S**3 + 3 * S * xy_yz_zx) // 3

        # Résolution
        a, b, c, d = 1, -S, xy_yz_zx, -xyz
        roots = solve_cubic_exact(a, b, c, d)
        x_solved, y_solved, z_solved = roots

        # Envoi de la réponse
        answer = f"{x_solved},{y_solved},{z_solved}\n"
        print(f"Send : {answer.strip()}")
        print(f"Diff: {S} vs {x_solved + y_solved + z_solved}")
        conn.sendall(answer.encode())

    conn.close()

if __name__ == "__main__":
    main()
